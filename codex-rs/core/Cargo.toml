[package]
edition.workspace = true
name = "agcodex-core"
version = { workspace = true }
description = "Core business logic with AST-RAG engine and tree-sitter integration"
homepage = "https://github.com/agcodex/agcodex"
repository = "https://github.com/agcodex/agcodex"
documentation = "https://docs.rs/agcodex-core"
keywords = ["ai", "coding-assistant", "ast", "tree-sitter", "llm"]
categories = ["development-tools", "command-line-utilities"]
license = { workspace = true }

[lib]
name = "agcodex_core"
path = "src/lib.rs"

[lints]
workspace = true

[dependencies]
async-channel = { workspace = true }
async-trait = { workspace = true }
base64 = { workspace = true }
bincode = { workspace = true }
bytes = { workspace = true }
chrono = { workspace = true, features = ["serde"] }
dashmap = { workspace = true }
agcodex-apply-patch = { path = "../apply-patch", version = "0.1.0" }
agcodex-ast = { path = "../ast", version = "0.1.0" }
agcodex-login = { path = "../login", version = "0.1.0" }
agcodex-mcp-client = { path = "../mcp-client", version = "0.1.0" }
agcodex-protocol = { path = "../protocol", version = "0.1.0" }
dirs = { workspace = true }
env-flags = { workspace = true }
eventsource-stream = { workspace = true }
futures = { workspace = true }
glob = "0.3"
libc = { workspace = true }
agcodex-mcp-types = { path = "../mcp-types", version = "0.1.0" }
mime_guess = { workspace = true }
os_info = { workspace = true }
rand = { workspace = true }
regex = { workspace = true }
regex-lite = { workspace = true }
reqwest = { workspace = true, features = ["json", "stream"] }
serde = { workspace = true, features = ["derive"] }
serde_bytes = { workspace = true }
serde_json = { workspace = true }
sha1 = { workspace = true }
shlex = { workspace = true }
similar = { workspace = true }
strum_macros = { workspace = true }
tempfile = { workspace = true }
thiserror = { workspace = true }
time = { workspace = true, features = ["formatting", "local-offset", "macros"] }
tokio = { workspace = true, features = [
    "io-std",
    "macros",
    "process",
    "rt-multi-thread",
    "signal",
] }
tokio-util = { workspace = true }
toml = { workspace = true }
toml_edit = { workspace = true }
tracing = { workspace = true, features = ["log"] }
tree-sitter = { workspace = true }
tree-sitter-bash = { workspace = true }
tree-sitter-rust = { workspace = true }
tree-sitter-python = { workspace = true }
tree-sitter-javascript = { workspace = true }
tree-sitter-typescript = { workspace = true }
tree-sitter-go = { workspace = true }
tree-sitter-java = { workspace = true }
tree-sitter-c = { workspace = true }
tree-sitter-cpp = { workspace = true }
tree-sitter-c-sharp = { workspace = true }

# Web languages
tree-sitter-html = { workspace = true }
tree-sitter-css = { workspace = true }
tree-sitter-json = { workspace = true }
tree-sitter-yaml = { workspace = true }
tree-sitter-toml = { workspace = true }

# Scripting languages
tree-sitter-ruby = { workspace = true }
tree-sitter-php = { workspace = true }
tree-sitter-lua = { workspace = true }

# Functional languages
tree-sitter-haskell = { workspace = true }
tree-sitter-elixir = { workspace = true }
tree-sitter-scala = { workspace = true }
tree-sitter-ocaml = { workspace = true }
tree-sitter-clojure = { workspace = true }

# Systems languages
tree-sitter-zig = { workspace = true }
tree-sitter-swift = { workspace = true }
tree-sitter-kotlin-ng = { workspace = true }
tree-sitter-objc = { workspace = true }

# Config/Build languages
tree-sitter-dockerfile = { workspace = true }
tree-sitter-hcl = { workspace = true }
tree-sitter-nix = { workspace = true }
tree-sitter-make = { workspace = true }

# Documentation languages
tree-sitter-markdown = { workspace = true }
# tree-sitter-latex = { workspace = true } # Disabled due to linking issues
tree-sitter-rst = { workspace = true }
rayon = { workspace = true }
ignore = { workspace = true }
lru = "0.16"
md5 = { workspace = true }
tantivy = "0.25"
uuid = { workspace = true, features = ["serde", "v4"] }
walkdir = { workspace = true }
whoami = { workspace = true }
wildmatch = { workspace = true }

# AST-grep integration
ast-grep = { workspace = true }
ast-grep-core = { workspace = true }
ast-grep-language = { workspace = true }
ast-grep-config = { workspace = true }
pretty_assertions = { workspace = true }

[target.'cfg(target_os = "linux")'.dependencies]
landlock = { workspace = true }
seccompiler = { workspace = true }

# Build OpenSSL from source for musl builds.
[target.x86_64-unknown-linux-musl.dependencies]
openssl-sys = { version = "0.9", features = ["vendored"] }

# Build OpenSSL from source for musl builds.
[target.aarch64-unknown-linux-musl.dependencies]
openssl-sys = { version = "0.9", features = ["vendored"] }

[dev-dependencies]
assert_cmd = "2"
core_test_support = { path = "tests/common" }
criterion = { workspace = true }
maplit = "1.0.2"
predicates = "3"
pretty_assertions = "1.4.1"
tempfile = { workspace = true }
tokio-test = "0.4"
walkdir = "2.5.0"
wiremock = "0.6"

[[bench]]
name = "subagent_benchmarks"
harness = false
