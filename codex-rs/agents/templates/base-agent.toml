# Base Agent Template for AGCodex
# Copy this file and customize for your specific agent needs

# Agent identity and metadata
name = "custom-agent"  # Unique agent identifier (lowercase, hyphens)
description = "Brief description of what this agent does"
intelligence = "medium"  # Options: light, medium, hard
mode_override = ""  # Optional: plan, build, review (empty = inherit from user)
priority = 50  # Execution priority (0-100, higher = more important)

# Tool permissions
[tools]
# List of allowed tools for this agent
allow = [
    "Read",           # Read files
    "AST-Search",     # Search code with AST
    # "Write",        # Write/modify files
    # "Execute",      # Run commands
    # "Git-*",        # Git operations
    # Add more as needed...
]

# Explicitly denied tools (overrides allow list)
deny = [
    "Delete",         # Prevent file deletion
    # Add restrictions...
]

# Agent prompt template
[prompt]
# Use {parameter_name} for variable substitution
template = """
You are a specialized agent focused on {focus_area}.

Context:
- Task: {task_description}
- Scope: {scope}
- Constraints: {constraints}

Your Approach:
1. First step in your process
2. Second step
3. Continue as needed...

Key Responsibilities:
- Primary responsibility
- Secondary responsibility
- Additional responsibilities...

Output Requirements:
- What format/structure to use
- Quality standards to meet
- Deliverables to produce
"""

# Optional system message (prepended to all interactions)
system = ""

# Parameter definitions
[parameters]
# Define each parameter that can be passed to your agent
# Parameters are substituted into the prompt template

task_description = {
    type = "string",           # Types: string, integer, boolean, float
    default = "",               # Default value if not provided
    required = false,           # Whether parameter must be provided
    description = "Description of the task to perform"
}

focus_area = {
    type = "string",
    default = "general",
    values = ["option1", "option2", "option3"],  # Optional: restrict to specific values
    description = "Area to focus on"
}

scope = {
    type = "string",
    default = "file",
    values = ["function", "class", "file", "module", "project"],
    description = "Scope of operation"
}

constraints = {
    type = "string",
    default = "none",
    description = "Any constraints or limitations"
}

verbose = {
    type = "boolean",
    default = false,
    description = "Enable verbose output"
}

max_results = {
    type = "integer",
    default = 10,
    min = 1,                    # Optional: minimum value
    max = 100,                  # Optional: maximum value
    description = "Maximum number of results to return"
}

threshold = {
    type = "float",
    default = 0.8,
    min = 0.0,
    max = 1.0,
    description = "Confidence threshold"
}

# Context inheritance settings
[context]
inherit_ast_index = true        # Inherit parsed AST index
inherit_embeddings = false      # Inherit vector embeddings
inherit_git_history = false     # Include git history
inherit_test_results = false    # Include test results
inherit_coverage_data = false   # Include code coverage
inherit_profiling_data = false  # Include performance profiling
inherit_dependencies = false    # Include dependency tree
max_context_size = "50MB"       # Maximum context size
include_git_ignored = false     # Include .gitignored files
exclude_patterns = []           # Patterns to exclude

# Optional: Hooks for lifecycle events
[hooks]
# pre_execute = "script_to_run_before.sh"
# post_execute = "script_to_run_after.sh"
# on_error = "error_handler.sh"

# Optional: Resource limits
[resources]
# max_memory = "2GB"
# max_cpu_percent = 80
# timeout_seconds = 300

# Optional: Custom environment variables
[environment]
# CUSTOM_VAR = "value"
# ANOTHER_VAR = "value"

# Optional: Agent chaining configuration
[chain]
# Define how this agent can chain with others
# next = ["agent-name"]         # Agents that can run after this one
# requires = ["other-agent"]    # Agents that must run before this one
# parallel = ["peer-agent"]     # Agents that can run in parallel