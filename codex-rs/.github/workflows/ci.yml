name: Continuous Integration

on:
  push:
    branches: [main, overhaul]
  pull_request:
    branches: [main, overhaul]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, nightly]
        exclude:
          # Reduce CI load by excluding some combinations
          - os: windows-latest
            rust: nightly
          - os: macos-latest
            rust: nightly

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Needed for proper git history in some tests
          fetch-depth: 2

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo build
        uses: actions/cache@v4
        with:
          path: target/
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-cargo-build-
            ${{ runner.os }}-cargo-build-

      - name: Check formatting
        if: matrix.rust == 'stable'
        run: cargo fmt --all --check

      - name: Run Clippy
        if: matrix.rust == 'stable'
        run: |
          cargo clippy --all-features --all-targets --workspace --tests -- -D warnings

      - name: Build workspace
        run: cargo build --workspace --all-features

      - name: Run tests
        run: cargo test --workspace --all-features --no-fail-fast

      - name: Run doc tests
        if: matrix.rust == 'stable'
        run: cargo test --workspace --doc

      - name: Test linux-sandbox crate (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: cargo test -p linux-sandbox

      - name: Check benchmarks compile
        if: matrix.rust == 'stable'
        run: cargo check --benches --all-features

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ubuntu-security-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-audit
        run: cargo install --locked cargo-audit

      - name: Run security audit
        run: cargo audit

      - name: Install cargo-deny
        run: cargo install --locked cargo-deny

      - name: Check licenses and dependencies
        run: cargo deny check

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ubuntu-coverage-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-llvm-cov
        run: cargo install --locked cargo-llvm-cov

      - name: Generate coverage report
        run: |
          cargo llvm-cov --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: lcov.info
          fail_ci_if_error: false

  build-check:
    name: Build Check (All Features)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ubuntu-build-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Check build with no default features
        run: cargo check --workspace --no-default-features

      - name: Check build with all features
        run: cargo check --workspace --all-features

      - name: Check examples
        run: cargo check --examples --all-features

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain (MSRV)
        uses: dtolnay/rust-toolchain@master
        with:
          # Based on Rust 2021 edition, should be 1.56+
          # Adjust based on actual MSRV requirements
          toolchain: "1.70.0"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ubuntu-msrv-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Check MSRV compatibility
        run: cargo check --workspace --all-features